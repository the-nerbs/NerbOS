#include "nosbase.h"
#include "kstdint.h"

NOS_EXTERN_C

// adapted from the MS-docs page: https://docs.microsoft.com/en-us/cpp/intrinsics/x86-intrinsics-list?view=vs-2017
// and the github source: https://github.com/MicrosoftDocs/cpp-docs/blob/master/docs/intrinsics/x86-intrinsics-list.md
unsigned char _addcarry_u16(unsigned char c_in, unsigned short src1, unsigned short src2, unsigned short* sum);
unsigned char _addcarry_u32(unsigned char c_in, unsigned int src1, unsigned int src2, unsigned int* sum);
unsigned char _addcarry_u8(unsigned char c_in, unsigned char src1, unsigned char src2, unsigned char* sum);
unsigned char _addcarryx_u32(unsigned char c_in, unsigned int src1, unsigned int src2, unsigned int* sum);
void __addfsbyte(unsigned long, unsigned char);
void __addfsdword(unsigned long, unsigned long);
void __addfsword(unsigned long, unsigned short);
void* _AddressOfReturnAddress(void);
unsigned int _andn_u32(unsigned int, unsigned int);
unsigned int _bextr_u32(unsigned int, unsigned int, unsigned int);
unsigned int _bextri_u32(unsigned int, unsigned int);
unsigned char _BitScanForward(unsigned long* Index, unsigned long Mask);
unsigned char _BitScanReverse(unsigned long* Index, unsigned long Mask);
unsigned char _bittest(long const* a, long b);
unsigned char _bittestandcomplement(long* a, long b);
unsigned char _bittestandreset(long* a, long b);
unsigned char _bittestandset(long* a, long b);
unsigned int _blcfill_u32(unsigned int);
unsigned int _blci_u32(unsigned int);
unsigned int _blcic_u32(unsigned int);
unsigned int _blcmsk_u32(unsigned int);
unsigned int _blcs_u32(unsigned int);
unsigned int _blsfill_u32(unsigned int);
unsigned int _blsi_u32(unsigned int);
unsigned int _blsic_u32(unsigned int);
unsigned int _blsmsk_u32(unsigned int);
unsigned int _blsr_u32(unsigned int);
unsigned int _bzhi_u32(unsigned int, unsigned int);
void _clac(void);
void __cpuid(int* a, int b);
void __cpuidex(int* a, int b, int c);
void __debugbreak(void);
void _disable(void);
__int64 __cdecl __emul(int, int);
unsigned __int64 __cdecl __emulu(unsigned int, unsigned int);
void _enable(void);
void __fastfail(unsigned int);
void _fxrstor(void const*);
void _fxsave(void*);
unsigned int __getcallerseflags();
void __halt(void);
unsigned char __inbyte(unsigned short Port);
void __inbytestring(unsigned short Port, unsigned char* Buffer, unsigned long Count);
void __incfsbyte(unsigned long);
void __incfsdword(unsigned long);
void __incfsword(unsigned long);
unsigned long __indword(unsigned short Port);
void __indwordstring(unsigned short Port, unsigned long* Buffer, unsigned long Count);
void __int2c(void);
long _InterlockedAddLargeStatistic(__int64 volatile*, long);
long _InterlockedAnd(long volatile*, long);
long _InterlockedAnd_HLEAcquire(long volatile*, long);
long _InterlockedAnd_HLERelease(long volatile*, long);
short _InterlockedAnd16(short volatile*, short);
char _InterlockedAnd8(char volatile*, char);
unsigned char _interlockedbittestandreset(long* a, long b);
unsigned char _interlockedbittestandreset_HLEAcquire(long* a, long b);
unsigned char _interlockedbittestandreset_HLERelease(long* a, long b);
unsigned char _interlockedbittestandset(long* a, long b);
unsigned char _interlockedbittestandset_HLEAcquire(long* a, long b);
unsigned char _interlockedbittestandset_HLERelease(long* a, long b);
long _InterlockedCompareExchange(long volatile*, long, long);
long _InterlockedCompareExchange_HLEAcquire(long volatile*, long, long);
long _InterlockedCompareExchange_HLERelease(long volatile*, long, long);
short _InterlockedCompareExchange16(short volatile* Destination, short Exchange, short Comparand);
__int64 _InterlockedCompareExchange64(__int64 volatile*, __int64, __int64);
__int64 _InterlockedCompareExchange64_HLEAcquire(__int64 volatile*, __int64, __int64);
__int64 _InterlockedCompareExchange64_HLERelease(__int64 volatile*, __int64, __int64);
char _InterlockedCompareExchange8(char volatile* Destination, char Exchange, char Comparand);
void* _InterlockedCompareExchangePointer(void* volatile*, void*, void*);
void* _InterlockedCompareExchangePointer_HLEAcquire(void* volatile*, void*, void*);
void* _InterlockedCompareExchangePointer_HLERelease(void* volatile*, void*, void*);
long _InterlockedDecrement(long volatile*);
short _InterlockedDecrement16(short volatile* Addend);
long _InterlockedExchange(long volatile*, long);
long _InterlockedExchange_HLEAcquire(long volatile*, long);
long _InterlockedExchange_HLERelease(long volatile*, long);
short _InterlockedExchange16(short volatile*, short);
char _InterlockedExchange8(char volatile*, char);
long _InterlockedExchangeAdd(long volatile*, long);
long _InterlockedExchangeAdd_HLEAcquire(long volatile*, long);
long _InterlockedExchangeAdd_HLERelease(long volatile*, long);
short _InterlockedExchangeAdd16(short volatile*, short);
char _InterlockedExchangeAdd8(char volatile*, char);
void* _InterlockedExchangePointer(void* volatile*, void*);
void* _InterlockedExchangePointer_HLEAcquire(void* volatile*, void*);
void* _InterlockedExchangePointer_HLERelease(void* volatile*, void*);
long _InterlockedIncrement(long volatile*);
short _InterlockedIncrement16(short volatile* Addend);
long _InterlockedOr(long volatile*, long);
long _InterlockedOr_HLEAcquire(long volatile*, long);
long _InterlockedOr_HLERelease(long volatile*, long);
short _InterlockedOr16(short volatile*, short);
char _InterlockedOr8(char volatile*, char);
long _InterlockedXor(long volatile*, long);
long _InterlockedXor_HLEAcquire(long volatile*, long);
long _InterlockedXor_HLERelease(long volatile*, long);
short _InterlockedXor16(short volatile*, short);
char _InterlockedXor8(char volatile*, char);
void __invlpg(void*);
void _invpcid(unsigned int, void*);
unsigned short __inword(unsigned short Port);
void __inwordstring(unsigned short Port, unsigned short* Buffer, unsigned long Count);
void _lgdt(void*);
void __lidt(void*);
unsigned __int64 __cdecl __ll_lshift(unsigned __int64, int);
__int64 __cdecl __ll_rshift(__int64, int);
unsigned short _load_be_u16(void const*);
short _loadbe_i16(void const*);
unsigned int _load_be_u32(void const*);
int _loadbe_i32(void const*);
void __llwpcb(void*);
unsigned char __lwpins32(unsigned int, unsigned int, unsigned int);
void __lwpval32(unsigned int, unsigned int, unsigned int);
unsigned int __lzcnt(unsigned int);
unsigned int _lzcnt_u32(unsigned int);
unsigned short __lzcnt16(unsigned short);
void _m_empty(void);
void _m_femms(void);
// __m64 _m_from_float(float);
// __m64 _m_from_int(int);
// void _m_maskmovq(__m64, __m64, char*);
// __m64 _m_packssdw(__m64, __m64);
// __m64 _m_packsswb(__m64, __m64);
// __m64 _m_packuswb(__m64, __m64);
// __m64 _m_paddb(__m64, __m64);
// __m64 _m_paddd(__m64, __m64);
// __m64 _m_paddsb(__m64, __m64);
// __m64 _m_paddsw(__m64, __m64);
// __m64 _m_paddusb(__m64, __m64);
// __m64 _m_paddusw(__m64, __m64);
// __m64 _m_paddw(__m64, __m64);
// __m64 _m_pand(__m64, __m64);
// __m64 _m_pandn(__m64, __m64);
// __m64 _m_pavgb(__m64, __m64);
// __m64 _m_pavgusb(__m64, __m64);
// __m64 _m_pavgw(__m64, __m64);
// __m64 _m_pcmpeqb(__m64, __m64);
// __m64 _m_pcmpeqd(__m64, __m64);
// __m64 _m_pcmpeqw(__m64, __m64);
// __m64 _m_pcmpgtb(__m64, __m64);
// __m64 _m_pcmpgtd(__m64, __m64);
// __m64 _m_pcmpgtw(__m64, __m64);
// int _m_pextrw(__m64, int);
// __m64 _m_pf2id(__m64);
// __m64 _m_pf2iw(__m64);
// __m64 _m_pfacc(__m64, __m64);
// __m64 _m_pfadd(__m64, __m64);
// __m64 _m_pfcmpeq(__m64, __m64);
// __m64 _m_pfcmpge(__m64, __m64);
// __m64 _m_pfcmpgt(__m64, __m64);
// __m64 _m_pfmax(__m64, __m64);
// __m64 _m_pfmin(__m64, __m64);
// __m64 _m_pfmul(__m64, __m64);
// __m64 _m_pfnacc(__m64, __m64);
// __m64 _m_pfpnacc(__m64, __m64);
// __m64 _m_pfrcp(__m64);
// __m64 _m_pfrcpit1(__m64, __m64);
// __m64 _m_pfrcpit2(__m64, __m64);
// __m64 _m_pfrsqit1(__m64, __m64);
// __m64 _m_pfrsqrt(__m64);
// __m64 _m_pfsub(__m64, __m64);
// __m64 _m_pfsubr(__m64, __m64);
// __m64 _m_pi2fd(__m64);
// __m64 _m_pi2fw(__m64);
// __m64 _m_pinsrw(__m64, int, int);
// __m64 _m_pmaddwd(__m64, __m64);
// __m64 _m_pmaxsw(__m64, __m64);
// __m64 _m_pmaxub(__m64, __m64);
// __m64 _m_pminsw(__m64, __m64);
// __m64 _m_pminub(__m64, __m64);
// int _m_pmovmskb(__m64);
// __m64 _m_pmulhrw(__m64, __m64);
// __m64 _m_pmulhuw(__m64, __m64);
// __m64 _m_pmulhw(__m64, __m64);
// __m64 _m_pmullw(__m64, __m64);
// __m64 _m_por(__m64, __m64);
void _m_prefetch(void*);
void _m_prefetchw(void*);
// __m64 _m_psadbw(__m64, __m64);
// __m64 _m_pshufw(__m64, int);
// __m64 _m_pslld(__m64, __m64);
// __m64 _m_pslldi(__m64, int);
// __m64 _m_psllq(__m64, __m64);
// __m64 _m_psllqi(__m64, int);
// __m64 _m_psllw(__m64, __m64);
// __m64 _m_psllwi(__m64, int);
// __m64 _m_psrad(__m64, __m64);
// __m64 _m_psradi(__m64, int);
// __m64 _m_psraw(__m64, __m64);
// __m64 _m_psrawi(__m64, int);
// __m64 _m_psrld(__m64, __m64);
// __m64 _m_psrldi(__m64, int);
// __m64 _m_psrlq(__m64, __m64);
// __m64 _m_psrlqi(__m64, int);
// __m64 _m_psrlw(__m64, __m64);
// __m64 _m_psrlwi(__m64, int);
// __m64 _m_psubb(__m64, __m64);
// __m64 _m_psubd(__m64, __m64);
// __m64 _m_psubsb(__m64, __m64);
// __m64 _m_psubsw(__m64, __m64);
// __m64 _m_psubusb(__m64, __m64);
// __m64 _m_psubusw(__m64, __m64);
// __m64 _m_psubw(__m64, __m64);
// __m64 _m_pswapd(__m64);
// __m64 _m_punpckhbw(__m64, __m64);
// __m64 _m_punpckhdq(__m64, __m64);
// __m64 _m_punpckhwd(__m64, __m64);
// __m64 _m_punpcklbw(__m64, __m64);
// __m64 _m_punpckldq(__m64, __m64);
// __m64 _m_punpcklwd(__m64, __m64);
// __m64 _m_pxor(__m64, __m64);
// float _m_to_float(__m64);
// int _m_to_int(__m64);
// __m128i _mm_abs_epi16(__m128i);
// __m128i _mm_abs_epi32(__m128i);
// __m128i _mm_abs_epi8(__m128i);
// __m64 _mm_abs_pi16(__m64);
// __m64 _mm_abs_pi32(__m64);
// __m64 _mm_abs_pi8(__m64);
// __m128i _mm_add_epi16(__m128i, __m128i);
// __m128i _mm_add_epi32(__m128i, __m128i);
// __m128i _mm_add_epi64(__m128i, __m128i);
// __m128i _mm_add_epi8(__m128i, __m128i);
// __m128d _mm_add_pd(__m128d, __m128d);
// __m128 _mm_add_ps(__m128, __m128);
// __m128d _mm_add_sd(__m128d, __m128d);
// __m64 _mm_add_si64(__m64, __m64);
// __m128 _mm_add_ss(__m128, __m128);
// __m128i _mm_adds_epi16(__m128i, __m128i);
// __m128i _mm_adds_epi8(__m128i, __m128i);
// __m128i _mm_adds_epu16(__m128i, __m128i);
// __m128i _mm_adds_epu8(__m128i, __m128i);
// __m128d _mm_addsub_pd(__m128d, __m128d);
// __m128 _mm_addsub_ps(__m128, __m128);
// __m128i _mm_aesdec_si128(__m128i, __m128i);
// __m128i _mm_aesdeclast_si128(__m128i, __m128i);
// __m128i _mm_aesenc_si128(__m128i, __m128i);
// __m128i _mm_aesenclast_si128(__m128i, __m128i);
// __m128i _mm_aesimc_si128(__m128i);
// __m128i _mm_aeskeygenassist_si128(__m128i, const int);
// __m128i _mm_alignr_epi8(__m128i, __m128i, int);
// __m64 _mm_alignr_pi8(__m64, __m64, int);
// __m128d _mm_and_pd(__m128d, __m128d);
// __m128 _mm_and_ps(__m128, __m128);
// __m128i _mm_and_si128(__m128i, __m128i);
// __m128d _mm_andnot_pd(__m128d, __m128d);
// __m128 _mm_andnot_ps(__m128, __m128);
// __m128i _mm_andnot_si128(__m128i, __m128i);
// __m128i _mm_avg_epu16(__m128i, __m128i);
// __m128i _mm_avg_epu8(__m128i, __m128i);
// __m128i _mm_blend_epi16(__m128i, __m128i, const int);
// __m128i _mm_blend_epi32(__m128i, __m128i, const int);
// __m128d _mm_blend_pd(__m128d, __m128d, const int);
// __m128  _mm_blend_ps(__m128, __m128, const int);
// __m128i _mm_blendv_epi8(__m128i, __m128i, __m128i);
// __m128d _mm_blendv_pd(__m128d, __m128d, __m128d);
// __m128  _mm_blendv_ps(__m128, __m128, __m128);
// __m128 _mm_broadcast_ss(float const*);
// __m128i _mm_broadcastb_epi8(__m128i);
// __m128i _mm_broadcastd_epi32(__m128i);
// __m128i _mm_broadcastq_epi64(__m128i);
// __m128d _mm_broadcastsd_pd(__m128d);
// __m128 _mm_broadcastss_ps(__m128);
// __m128i _mm_broadcastw_epi16(__m128i);
// __m128  _mm_castpd_ps(__m128d);
// __m128i _mm_castpd_si128(__m128d);
// __m128d _mm_castps_pd(__m128);
// __m128i _mm_castps_si128(__m128);
// __m128d _mm_castsi128_pd(__m128i);
// __m128  _mm_castsi128_ps(__m128i);
void _mm_clflush(void const*);
// __m128i _mm_clmulepi64_si128(__m128i, __m128i, const int);
// __m128i _mm_cmov_si128(__m128i, __m128i, __m128i);
// __m128d  _mm_cmp_pd(__m128d, __m128d, const int);
// __m128  _mm_cmp_ps(__m128, __m128, const int);
// __m128d  _mm_cmp_sd(__m128d, __m128d, const int);
// __m128  _mm_cmp_ss(__m128, __m128, const int);
// __m128i _mm_cmpeq_epi16(__m128i, __m128i);
// __m128i _mm_cmpeq_epi32(__m128i, __m128i);
// __m128i _mm_cmpeq_epi64(__m128i, __m128i);
// __m128i _mm_cmpeq_epi8(__m128i, __m128i);
// __m128d _mm_cmpeq_pd(__m128d, __m128d);
// __m128 _mm_cmpeq_ps(__m128, __m128);
// __m128d _mm_cmpeq_sd(__m128d, __m128d);
// __m128 _mm_cmpeq_ss(__m128, __m128);
// int _mm_cmpestra(__m128i, int, __m128i, int, const int);
// int _mm_cmpestrc(__m128i, int, __m128i, int, const int);
// int _mm_cmpestri(__m128i, int, __m128i, int, const int);
// __m128i _mm_cmpestrm(__m128i, int, __m128i, int, const int);
// int _mm_cmpestro(__m128i, int, __m128i, int, const int);
// int _mm_cmpestrs(__m128i, int, __m128i, int, const int);
// int _mm_cmpestrz(__m128i, int, __m128i, int, const int);
// __m128d _mm_cmpge_pd(__m128d, __m128d);
// __m128 _mm_cmpge_ps(__m128, __m128);
// __m128d _mm_cmpge_sd(__m128d, __m128d);
// __m128 _mm_cmpge_ss(__m128, __m128);
// __m128i _mm_cmpgt_epi16(__m128i, __m128i);
// __m128i _mm_cmpgt_epi32(__m128i, __m128i);
// __m128i _mm_cmpgt_epi64(__m128i, __m128i);
// __m128i _mm_cmpgt_epi8(__m128i, __m128i);
// __m128d _mm_cmpgt_pd(__m128d, __m128d);
// __m128 _mm_cmpgt_ps(__m128, __m128);
// __m128d _mm_cmpgt_sd(__m128d, __m128d);
// __m128 _mm_cmpgt_ss(__m128, __m128);
// int _mm_cmpistra(__m128i, __m128i, const int);
// int _mm_cmpistrc(__m128i, __m128i, const int);
// int _mm_cmpistri(__m128i, __m128i, const int);
// __m128i _mm_cmpistrm(__m128i, __m128i, const int);
// int _mm_cmpistro(__m128i, __m128i, const int);
// int _mm_cmpistrs(__m128i, __m128i, const int);
// int _mm_cmpistrz(__m128i, __m128i, const int);
// __m128d _mm_cmple_pd(__m128d, __m128d);
// __m128 _mm_cmple_ps(__m128, __m128);
// __m128d _mm_cmple_sd(__m128d, __m128d);
// __m128 _mm_cmple_ss(__m128, __m128);
// __m128i _mm_cmplt_epi16(__m128i, __m128i);
// __m128i _mm_cmplt_epi32(__m128i, __m128i);
// __m128i _mm_cmplt_epi8(__m128i, __m128i);
// __m128d _mm_cmplt_pd(__m128d, __m128d);
// __m128 _mm_cmplt_ps(__m128, __m128);
// __m128d _mm_cmplt_sd(__m128d, __m128d);
// __m128 _mm_cmplt_ss(__m128, __m128);
// __m128d _mm_cmpneq_pd(__m128d, __m128d);
// __m128 _mm_cmpneq_ps(__m128, __m128);
// __m128d _mm_cmpneq_sd(__m128d, __m128d);
// __m128 _mm_cmpneq_ss(__m128, __m128);
// __m128d _mm_cmpnge_pd(__m128d, __m128d);
// __m128 _mm_cmpnge_ps(__m128, __m128);
// __m128d _mm_cmpnge_sd(__m128d, __m128d);
// __m128 _mm_cmpnge_ss(__m128, __m128);
// __m128d _mm_cmpngt_pd(__m128d, __m128d);
// __m128 _mm_cmpngt_ps(__m128, __m128);
// __m128d _mm_cmpngt_sd(__m128d, __m128d);
// __m128 _mm_cmpngt_ss(__m128, __m128);
// __m128d _mm_cmpnle_pd(__m128d, __m128d);
// __m128 _mm_cmpnle_ps(__m128, __m128);
// __m128d _mm_cmpnle_sd(__m128d, __m128d);
// __m128 _mm_cmpnle_ss(__m128, __m128);
// __m128d _mm_cmpnlt_pd(__m128d, __m128d);
// __m128 _mm_cmpnlt_ps(__m128, __m128);
// __m128d _mm_cmpnlt_sd(__m128d, __m128d);
// __m128 _mm_cmpnlt_ss(__m128, __m128);
// __m128d _mm_cmpord_pd(__m128d, __m128d);
// __m128 _mm_cmpord_ps(__m128, __m128);
// __m128d _mm_cmpord_sd(__m128d, __m128d);
// __m128 _mm_cmpord_ss(__m128, __m128);
// __m128d _mm_cmpunord_pd(__m128d, __m128d);
// __m128 _mm_cmpunord_ps(__m128, __m128);
// __m128d _mm_cmpunord_sd(__m128d, __m128d);
// __m128 _mm_cmpunord_ss(__m128, __m128);
// __m128i _mm_com_epi16(__m128i, __m128i, int);
// __m128i _mm_com_epi32(__m128i, __m128i, int);
// __m128i _mm_com_epi32(__m128i, __m128i, int);
// __m128i _mm_com_epi8(__m128i, __m128i, int);
// __m128i _mm_com_epu16(__m128i, __m128i, int);
// __m128i _mm_com_epu32(__m128i, __m128i, int);
// __m128i _mm_com_epu32(__m128i, __m128i, int);
// __m128i _mm_com_epu8(__m128i, __m128i, int);
// int _mm_comieq_sd(__m128d, __m128d);
// int _mm_comieq_ss(__m128, __m128);
// int _mm_comige_sd(__m128d, __m128d);
// int _mm_comige_ss(__m128, __m128);
// int _mm_comigt_sd(__m128d, __m128d);
// int _mm_comigt_ss(__m128, __m128);
// int _mm_comile_sd(__m128d, __m128d);
// int _mm_comile_ss(__m128, __m128);
// int _mm_comilt_sd(__m128d, __m128d);
// int _mm_comilt_ss(__m128, __m128);
// int _mm_comineq_sd(__m128d, __m128d);
// int _mm_comineq_ss(__m128, __m128);
unsigned int _mm_crc32_u16(unsigned int, unsigned short);
unsigned int _mm_crc32_u32(unsigned int, unsigned int);
unsigned int _mm_crc32_u8(unsigned int, unsigned char);
// __m128 _mm_cvt_pi2ps(__m128, __m64);
// __m64 _mm_cvt_ps2pi(__m128);
// __m128 _mm_cvt_si2ss(__m128, int);
// int _mm_cvt_ss2si(__m128);
// __m128i _mm_cvtepi16_epi32(__m128i);
// __m128i _mm_cvtepi16_epi64(__m128i);
// __m128i _mm_cvtepi32_epi64(__m128i);
// __m128d _mm_cvtepi32_pd(__m128i);
// __m128 _mm_cvtepi32_ps(__m128i);
// __m128i _mm_cvtepi8_epi16(__m128i);
// __m128i _mm_cvtepi8_epi32(__m128i);
// __m128i _mm_cvtepi8_epi64(__m128i);
// __m128i _mm_cvtepu16_epi32(__m128i);
// __m128i _mm_cvtepu16_epi64(__m128i);
// __m128i _mm_cvtepu32_epi64(__m128i);
// __m128i _mm_cvtepu8_epi16(__m128i);
// __m128i _mm_cvtepu8_epi32(__m128i);
// __m128i _mm_cvtepu8_epi64(__m128i);
// __m128i _mm_cvtpd_epi32(__m128d);
// __m64 _mm_cvtpd_pi32(__m128d);
// __m128 _mm_cvtpd_ps(__m128d);
// __m128 _mm_cvtph_ps(__m128i);
// __m128d _mm_cvtpi32_pd(__m64);
// __m128i _mm_cvtps_epi32(__m128);
// __m128d _mm_cvtps_pd(__m128);
// __m128i _mm_cvtps_ph(__m128, const int);
// double _mm_cvtsd_f64(__m128d);
// int _mm_cvtsd_si32(__m128d);
// __m128 _mm_cvtsd_ss(__m128, __m128d);
// int _mm_cvtsi128_si32(__m128i);
// __m128d _mm_cvtsi32_sd(__m128d, int);
// __m128i _mm_cvtsi32_si128(int);
// float _mm_cvtss_f32(__m128);
// __m128d _mm_cvtss_sd(__m128d, __m128);
// __m64 _mm_cvtt_ps2pi(__m128);
// int _mm_cvtt_ss2si(__m128);
// __m128i _mm_cvttpd_epi32(__m128d);
// __m64 _mm_cvttpd_pi32(__m128d);
// __m128i _mm_cvttps_epi32(__m128);
// int _mm_cvttsd_si32(__m128d);
// __m128d _mm_div_pd(__m128d, __m128d);
// __m128 _mm_div_ps(__m128, __m128);
// __m128d _mm_div_sd(__m128d, __m128d);
// __m128 _mm_div_ss(__m128, __m128);
// __m128d _mm_dp_pd(__m128d, __m128d, const int);
// __m128  _mm_dp_ps(__m128, __m128, const int);
// int _mm_extract_epi16(__m128i, int);
// int   _mm_extract_epi32(__m128i, const int);
// int   _mm_extract_epi8(__m128i, const int);
// int _mm_extract_ps(__m128, const int);
// __m128i _mm_extract_si64(__m128i, __m128i);
// __m128i _mm_extracti_si64(__m128i, int, int);
// __m128d _mm_fmadd_pd(__m128d a, __m128d b, __m128d c);
// __m128 _mm_fmadd_ps(__m128 a, __m128 b, __m128 c);
// __m128d _mm_fmadd_sd(__m128d a, __m128d b, __m128d c);
// __m128 _mm_fmadd_ss(__m128 a, __m128 b, __m128 c);
// __m128d _mm_fmaddsub_pd(__m128d a, __m128d b, __m128d c);
// __m128 _mm_fmaddsub_ps(__m128 a, __m128 b, __m128 c);
// __m128d _mm_fmsub_pd(__m128d a, __m128d b, __m128d c);
// __m128 _mm_fmsub_ps(__m128 a, __m128 b, __m128 c);
// __m128d _mm_fmsub_sd(__m128d a, __m128d b, __m128d c);
// __m128 _mm_fmsub_ss(__m128 a, __m128 b, __m128 c);
// __m128d _mm_fmsubadd_pd(__m128d a, __m128d b, __m128d c);
// __m128 _mm_fmsubadd_ps(__m128 a, __m128 b, __m128 c);
// __m128d _mm_fnmadd_pd(__m128d a, __m128d b, __m128d c);
// __m128 _mm_fnmadd_ps(__m128 a, __m128 b, __m128 c);
// __m128d _mm_fnmadd_sd(__m128d a, __m128d b, __m128d c);
// __m128 _mm_fnmadd_ss(__m128 a, __m128 b, __m128 c);
// __m128d _mm_fnmsub_pd(__m128d a, __m128d b, __m128d c);
// __m128 _mm_fnmsub_ps(__m128 a, __m128 b, __m128 c);
// __m128d _mm_fnmsub_sd(__m128d a, __m128d b, __m128d c);
// __m128 _mm_fnmsub_ss(__m128 a, __m128 b, __m128 c);
// __m128d _mm_frcz_pd(__m128d);
// __m128 _mm_frcz_ps(__m128);
// __m128d _mm_frcz_sd(__m128d, __m128d);
// __m128 _mm_frcz_ss(__m128, __m128);
unsigned int _mm_getcsr(void);
// __m128i _mm_hadd_epi16(__m128i, __m128i);
// __m128i _mm_hadd_epi32(__m128i, __m128i);
// __m128d _mm_hadd_pd(__m128d, __m128d);
// __m64 _mm_hadd_pi16(__m64, __m64);
// __m64 _mm_hadd_pi32(__m64, __m64);
// __m128 _mm_hadd_ps(__m128, __m128);
// __m128i _mm_haddd_epi16(__m128i);
// __m128i _mm_haddd_epi8(__m128i);
// __m128i _mm_haddd_epu16(__m128i);
// __m128i _mm_haddd_epu8(__m128i);
// __m128i _mm_haddq_epi16(__m128i);
// __m128i _mm_haddq_epi32(__m128i);
// __m128i _mm_haddq_epi8(__m128i);
// __m128i _mm_haddq_epu16(__m128i);
// __m128i _mm_haddq_epu32(__m128i);
// __m128i _mm_haddq_epu8(__m128i);
// __m128i _mm_hadds_epi16(__m128i, __m128i);
// __m64 _mm_hadds_pi16(__m64, __m64);
// __m128i _mm_haddw_epi8(__m128i);
// __m128i _mm_haddw_epu8(__m128i);
// __m128i _mm_hsub_epi16(__m128i, __m128i);
// __m128i _mm_hsub_epi32(__m128i, __m128i);
// __m128d _mm_hsub_pd(__m128d, __m128d);
// __m64 _mm_hsub_pi16(__m64, __m64);
// __m64 _mm_hsub_pi32(__m64, __m64);
// __m128 _mm_hsub_ps(__m128, __m128);
// __m128i _mm_hsubd_epi16(__m128i);
// __m128i _mm_hsubq_epi32(__m128i);
// __m128i _mm_hsubs_epi16(__m128i, __m128i);
// __m64 _mm_hsubs_pi16(__m64, __m64);
// __m128i _mm_hsubw_epi8(__m128i);
// __m128i _mm_i32gather_epi32(int const* base, __m128i index, const int scale);
// __m128i _mm_i32gather_epi64(__int64 const* base, __m128i index, const int scale);
// __m128d _mm_i32gather_pd(double const* base, __m128i index, const int scale);
// __m128 _mm_i32gather_ps(float const* base, __m128i index, const int scale);
// __m128i _mm_i64gather_epi32(int const* base, __m128i index, const int scale);
// __m128i _mm_i64gather_epi64(__int64 const* base, __m128i index, const int scale);
// __m128d _mm_i64gather_pd(double const* base, __m128i index, const int scale);
// __m128 _mm_i64gather_ps(float const* base, __m128i index, const int scale);
// __m128i _mm_insert_epi16(__m128i, int, int);
// __m128i _mm_insert_epi32(__m128i, int, const int);
// __m128i _mm_insert_epi8(__m128i, int, const int);
// __m128 _mm_insert_ps(__m128, __m128, const int);
// __m128i _mm_insert_si64(__m128i, __m128i);
// __m128i _mm_inserti_si64(__m128i, __m128i, int, int);
// __m128i _mm_lddqu_si128(__m128i const*);
void _mm_lfence(void);
// __m128d _mm_load_pd(double*);
// __m128 _mm_load_ps(float*);
// __m128 _mm_load_ps1(float*);
// __m128d _mm_load_sd(double*);
// __m128i _mm_load_si128(__m128i*);
// __m128 _mm_load_ss(float*);
// __m128d _mm_load1_pd(double*);
// __m128d _mm_loaddup_pd(double const*);
// __m128d _mm_loadh_pd(__m128d, double*);
// __m128 _mm_loadh_pi(__m128, __m64*);
// __m128i _mm_loadl_epi64(__m128i*);
// __m128d _mm_loadl_pd(__m128d, double*);
// __m128 _mm_loadl_pi(__m128, __m64*);
// __m128d _mm_loadr_pd(double*);
// __m128 _mm_loadr_ps(float*);
// __m128d _mm_loadu_pd(double*);
// __m128 _mm_loadu_ps(float*);
// __m128i _mm_loadu_si128(__m128i*);
// __m128i _mm_macc_epi16(__m128i, __m128i, __m128i);
// __m128i _mm_macc_epi32(__m128i, __m128i, __m128i);
// __m128d _mm_macc_pd(__m128d, __m128d, __m128d);
// __m128 _mm_macc_ps(__m128, __m128, __m128);
// __m128d _mm_macc_sd(__m128d, __m128d, __m128d);
// __m128 _mm_macc_ss(__m128, __m128, __m128);
// __m128i _mm_maccd_epi16(__m128i, __m128i, __m128i);
// __m128i _mm_macchi_epi32(__m128i, __m128i, __m128i);
// __m128i _mm_macclo_epi32(__m128i, __m128i, __m128i);
// __m128i _mm_maccs_epi16(__m128i, __m128i, __m128i);
// __m128i _mm_maccs_epi32(__m128i, __m128i, __m128i);
// __m128i _mm_maccsd_epi16(__m128i, __m128i, __m128i);
// __m128i _mm_maccshi_epi32(__m128i, __m128i, __m128i);
// __m128i _mm_maccslo_epi32(__m128i, __m128i, __m128i);
// __m128i _mm_madd_epi16(__m128i, __m128i);
// __m128i _mm_maddd_epi16(__m128i, __m128i, __m128i);
// __m128i _mm_maddsd_epi16(__m128i, __m128i, __m128i);
// __m128d _mm_maddsub_pd(__m128d, __m128d, __m128d);
// __m128 _mm_maddsub_ps(__m128, __m128, __m128);
// __m128i _mm_maddubs_epi16(__m128i, __m128i);
// __m64 _mm_maddubs_pi16(__m64, __m64);
// __m128i _mm_mask_i32gather_epi32(__m128i src, int const* base, __m128i index, __m128i mask, const int scale);
// __m128i _mm_mask_i32gather_epi64(__m128i src, __int64 const* base, __m128i index, __m128i mask, const int scale);
// __m128d _mm_mask_i32gather_pd(__m128d src, double const* base, __m128i index, __m128d mask, const int scale);
// __m128 _mm_mask_i32gather_ps(__m128 src, float const* base, __m128i index, __m128 mask, const int scale);
// __m128i _mm_mask_i64gather_epi32(__m128i src, int const* base, __m128i index, __m128i mask, const int scale);
// __m128i _mm_mask_i64gather_epi64(__m128i src, __int64 const* base, __m128i index, __m128i mask, const int scale);
// __m128d _mm_mask_i64gather_pd(__m128d src, double const* base, __m128i index, __m128d mask, const int scale);
// __m128 _mm_mask_i64gather_ps(__m128 src, float const* base, __m128i index, __m128 mask, const int scale);
// __m128i _mm_maskload_epi32(int const*, __m128i);
// __m128i _mm_maskload_epi64(__int64 const*, __m128i);
// __m128d _mm_maskload_pd(double const*, __m128i);
// __m128 _mm_maskload_ps(float const*, __m128i);
// void _mm_maskmoveu_si128(__m128i, __m128i, char*);
// void _mm_maskstore_epi32(int*, __m128i, __m128i);
// void _mm_maskstore_epi64(__int64*, __m128i, __m128i);
// void _mm_maskstore_pd(double*, __m128i, __m128d);
// void _mm_maskstore_ps(float*, __m128i, __m128);
// __m128i _mm_max_epi16(__m128i, __m128i);
// __m128i _mm_max_epi32(__m128i, __m128i);
// __m128i _mm_max_epi8(__m128i, __m128i);
// __m128i _mm_max_epu16(__m128i, __m128i);
// __m128i _mm_max_epu32(__m128i, __m128i);
// __m128i _mm_max_epu8(__m128i, __m128i);
// __m128d _mm_max_pd(__m128d, __m128d);
// __m128 _mm_max_ps(__m128, __m128);
// __m128d _mm_max_sd(__m128d, __m128d);
// __m128 _mm_max_ss(__m128, __m128);
void _mm_mfence(void);
// __m128i _mm_min_epi16(__m128i, __m128i);
// __m128i _mm_min_epi32(__m128i, __m128i);
// __m128i _mm_min_epi8(__m128i, __m128i);
// __m128i _mm_min_epu16(__m128i, __m128i);
// __m128i _mm_min_epu32(__m128i, __m128i);
// __m128i _mm_min_epu8(__m128i, __m128i);
// __m128d _mm_min_pd(__m128d, __m128d);
// __m128 _mm_min_ps(__m128, __m128);
// __m128d _mm_min_sd(__m128d, __m128d);
// __m128 _mm_min_ss(__m128, __m128);
// __m128i _mm_minpos_epu16(__m128i);
void _mm_monitor(void const*, unsigned int, unsigned int);
// __m128i _mm_move_epi64(__m128i);
// __m128d _mm_move_sd(__m128d, __m128d);
// __m128 _mm_move_ss(__m128, __m128);
// __m128d _mm_movedup_pd(__m128d);
// __m128 _mm_movehdup_ps(__m128);
// __m128 _mm_movehl_ps(__m128, __m128);
// __m128 _mm_moveldup_ps(__m128);
// __m128 _mm_movelh_ps(__m128, __m128);
// int _mm_movemask_epi8(__m128i);
// int _mm_movemask_pd(__m128d);
// int _mm_movemask_ps(__m128);
// __m64 _mm_movepi64_pi64(__m128i);
// __m128i _mm_movpi64_epi64(__m64);
// __m128i _mm_mpsadbw_epu8(__m128i s1, __m128i, const int);
// __m128d _mm_msub_pd(__m128d, __m128d, __m128d);
// __m128 _mm_msub_ps(__m128, __m128, __m128);
// __m128d _mm_msub_sd(__m128d, __m128d, __m128d);
// __m128 _mm_msub_ss(__m128, __m128, __m128);
// __m128d _mm_msubadd_pd(__m128d, __m128d, __m128d);
// __m128 _mm_msubadd_ps(__m128, __m128, __m128);
// __m128i _mm_mul_epi32(__m128i, __m128i);
// __m128i _mm_mul_epu32(__m128i, __m128i);
// __m128d _mm_mul_pd(__m128d, __m128d);
// __m128 _mm_mul_ps(__m128, __m128);
// __m128d _mm_mul_sd(__m128d, __m128d);
// __m128 _mm_mul_ss(__m128, __m128);
// __m64 _mm_mul_su32(__m64, __m64);
// __m128i _mm_mulhi_epi16(__m128i, __m128i);
// __m128i _mm_mulhi_epu16(__m128i, __m128i);
// __m128i _mm_mulhrs_epi16(__m128i, __m128i);
// __m64 _mm_mulhrs_pi16(__m64, __m64);
// __m128i _mm_mullo_epi16(__m128i, __m128i);
// __m128i _mm_mullo_epi32(__m128i, __m128i);
void _mm_mwait(unsigned int, unsigned int);
// __m128d _mm_nmacc_pd(__m128d, __m128d, __m128d);
// __m128 _mm_nmacc_ps(__m128, __m128, __m128);
// __m128d _mm_nmacc_sd(__m128d, __m128d, __m128d);
// __m128 _mm_nmacc_ss(__m128, __m128, __m128);
// __m128d _mm_nmsub_pd(__m128d, __m128d, __m128d);
// __m128 _mm_nmsub_ps(__m128, __m128, __m128);
// __m128d _mm_nmsub_sd(__m128d, __m128d, __m128d);
// __m128 _mm_nmsub_ss(__m128, __m128, __m128);
// __m128d _mm_or_pd(__m128d, __m128d);
// __m128 _mm_or_ps(__m128, __m128);
// __m128i _mm_or_si128(__m128i, __m128i);
// __m128i _mm_packs_epi16(__m128i, __m128i);
// __m128i _mm_packs_epi32(__m128i, __m128i);
// __m128i _mm_packus_epi16(__m128i, __m128i);
// __m128i _mm_packus_epi32(__m128i, __m128i);
void _mm_pause(void);
// __m128i _mm_perm_epi8(__m128i, __m128i, __m128i);
// __m128d _mm_permute_pd(__m128d, int);
// __m128 _mm_permute_ps(__m128, int);
// __m128d _mm_permute2_pd(__m128d, __m128d, __m128i, int);
// __m128 _mm_permute2_ps(__m128, __m128, __m128i, int);
// __m128d _mm_permutevar_pd(__m128d, __m128i);
// __m128 _mm_permutevar_ps(__m128, __m128i);
int _mm_popcnt_u32(unsigned int);
void _mm_prefetch(char*, int);
// __m128 _mm_rcp_ps(__m128);
// __m128 _mm_rcp_ss(__m128);
// __m128i _mm_rot_epi16(__m128i, __m128i);
// __m128i _mm_rot_epi32(__m128i, __m128i);
// __m128i _mm_rot_epi64(__m128i, __m128i);
// __m128i _mm_rot_epi8(__m128i, __m128i);
// __m128i _mm_rot_epi16(__m128i, int);
// __m128i _mm_rot_epi32(__m128i, int);
// __m128i _mm_rot_epi64(__m128i, int);
// __m128i _mm_rot_epi8(__m128i, int);
// __m128d _mm_round_pd(__m128d, const int);
// __m128  _mm_round_ps(__m128, const int);
// __m128d _mm_round_sd(__m128d, __m128d, const int);
// __m128  _mm_round_ss(__m128, __m128, const int);
// __m128 _mm_rsqrt_ps(__m128);
// __m128 _mm_rsqrt_ss(__m128);
// __m128i _mm_sad_epu8(__m128i, __m128i);
// __m128i _mm_set_epi16(short, short, short, short, short, short, short, short);
// __m128i _mm_set_epi32(int, int, int, int);
// __m128i _mm_set_epi64(__m64, __m64);
// __m128i _mm_set_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char);
// __m128d _mm_set_pd(double, double);
// __m64 _mm_set_pi16(short, short, short, short);
// __m64 _mm_set_pi32(int, int);
// __m64 _mm_set_pi8(char, char, char, char, char, char, char, char);
// __m128 _mm_set_ps(float, float, float, float);
// __m128 _mm_set_ps1(float);
// __m128d _mm_set_sd(double);
// __m128 _mm_set_ss(float);
// __m128i _mm_set1_epi16(short);
// __m128i _mm_set1_epi32(int);
// __m128i _mm_set1_epi64(__m64);
// __m128i _mm_set1_epi8(char);
// __m128d _mm_set1_pd(double);
// __m64 _mm_set1_pi16(short);
// __m64 _mm_set1_pi32(int);
// __m64 _mm_set1_pi8(char);
void _mm_setcsr(unsigned int);
// __m128i _mm_setl_epi64(__m128i);
// __m128i _mm_setr_epi16(short, short, short, short, short, short, short, short);
// __m128i _mm_setr_epi32(int, int, int, int);
// __m128i _mm_setr_epi64(__m64, __m64);
// __m128i _mm_setr_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char);
// __m128d _mm_setr_pd(double, double);
// __m64 _mm_setr_pi16(short, short, short, short);
// __m64 _mm_setr_pi32(int, int);
// __m64 _mm_setr_pi8(char, char, char, char, char, char, char, char);
// __m128 _mm_setr_ps(float, float, float, float);
// __m128d _mm_setzero_pd(void);
// __m128 _mm_setzero_ps(void);
// __m128i _mm_setzero_si128(void);
// __m64 _mm_setzero_si64(void);
void _mm_sfence(void);
// __m128i _mm_sha_epi16(__m128i, __m128i);
// __m128i _mm_sha_epi32(__m128i, __m128i);
// __m128i _mm_sha_epi64(__m128i, __m128i);
// __m128i _mm_sha_epi8(__m128i, __m128i);
// __m128i _mm_shl_epi16(__m128i, __m128i);
// __m128i _mm_shl_epi32(__m128i, __m128i);
// __m128i _mm_shl_epi64(__m128i, __m128i);
// __m128i _mm_shl_epi8(__m128i, __m128i);
// __m128i _mm_shuffle_epi32(__m128i, int);
// __m128i _mm_shuffle_epi8(__m128i, __m128i);
// __m128d _mm_shuffle_pd(__m128d, __m128d, int);
// __m64 _mm_shuffle_pi8(__m64, __m64);
// __m128 _mm_shuffle_ps(__m128, __m128, unsigned int);
// __m128i _mm_shufflehi_epi16(__m128i, int);
// __m128i _mm_shufflelo_epi16(__m128i, int);
// __m128i _mm_sign_epi16(__m128i, __m128i);
// __m128i _mm_sign_epi32(__m128i, __m128i);
// __m128i _mm_sign_epi8(__m128i, __m128i);
// __m64 _mm_sign_pi16(__m64, __m64);
// __m64 _mm_sign_pi32(__m64, __m64);
// __m64 _mm_sign_pi8(__m64, __m64);
// __m128i _mm_sll_epi16(__m128i, __m128i);
// __m128i _mm_sll_epi32(__m128i, __m128i);
// __m128i _mm_sll_epi64(__m128i, __m128i);
// __m128i _mm_slli_epi16(__m128i, int);
// __m128i _mm_slli_epi32(__m128i, int);
// __m128i _mm_slli_epi64(__m128i, int);
// __m128i _mm_slli_si128(__m128i, int);
// __m128i _mm_sllv_epi32(__m128i, __m128i);
// __m128i _mm_sllv_epi64(__m128i, __m128i);
// __m128d _mm_sqrt_pd(__m128d);
// __m128 _mm_sqrt_ps(__m128);
// __m128d _mm_sqrt_sd(__m128d, __m128d);
// __m128 _mm_sqrt_ss(__m128);
// __m128i _mm_sra_epi16(__m128i, __m128i);
// __m128i _mm_sra_epi32(__m128i, __m128i);
// __m128i _mm_srai_epi16(__m128i, int);
// __m128i _mm_srai_epi32(__m128i, int);
// __m128i _mm_srav_epi32(__m128i, __m128i);
// __m128i _mm_srl_epi16(__m128i, __m128i);
// __m128i _mm_srl_epi32(__m128i, __m128i);
// __m128i _mm_srl_epi64(__m128i, __m128i);
// __m128i _mm_srli_epi16(__m128i, int);
// __m128i _mm_srli_epi32(__m128i, int);
// __m128i _mm_srli_epi64(__m128i, int);
// __m128i _mm_srli_si128(__m128i, int);
// __m128i _mm_srlv_epi32(__m128i, __m128i);
// __m128i _mm_srlv_epi64(__m128i, __m128i);
// void _mm_store_pd(double*, __m128d);
// void _mm_store_ps(float*, __m128);
// void _mm_store_ps1(float*, __m128);
// void _mm_store_sd(double*, __m128d);
// void _mm_store_si128(__m128i*, __m128i);
// void _mm_store_ss(float*, __m128);
// void _mm_store1_pd(double*, __m128d);
// void _mm_storeh_pd(double*, __m128d);
// void _mm_storeh_pi(__m64*, __m128);
// void _mm_storel_epi64(__m128i*, __m128i);
// void _mm_storel_pd(double*, __m128d);
// void _mm_storel_pi(__m64*, __m128);
// void _mm_storer_pd(double*, __m128d);
// void _mm_storer_ps(float*, __m128);
// void _mm_storeu_pd(double*, __m128d);
// void _mm_storeu_ps(float*, __m128);
// void _mm_storeu_si128(__m128i*, __m128i);
// __m128i _mm_stream_load_si128(__m128i*);
// void _mm_stream_pd(double*, __m128d);
// void _mm_stream_pi(__m64*, __m64);
// void _mm_stream_ps(float*, __m128);
// void _mm_stream_sd(double*, __m128d);
// void _mm_stream_si128(__m128i*, __m128i);
// void _mm_stream_si32(int*, int);
// void _mm_stream_ss(float*, __m128);
// __m128i _mm_sub_epi16(__m128i, __m128i);
// __m128i _mm_sub_epi32(__m128i, __m128i);
// __m128i _mm_sub_epi64(__m128i, __m128i);
// __m128i _mm_sub_epi8(__m128i, __m128i);
// __m128d _mm_sub_pd(__m128d, __m128d);
// __m128 _mm_sub_ps(__m128, __m128);
// __m128d _mm_sub_sd(__m128d, __m128d);
// __m64 _mm_sub_si64(__m64, __m64);
// __m128 _mm_sub_ss(__m128, __m128);
// __m128i _mm_subs_epi16(__m128i, __m128i);
// __m128i _mm_subs_epi8(__m128i, __m128i);
// __m128i _mm_subs_epu16(__m128i, __m128i);
// __m128i _mm_subs_epu8(__m128i, __m128i);
// int _mm_testc_pd(__m128d, __m128d);
// int _mm_testc_ps(__m128, __m128);
// int _mm_testc_si128(__m128i, __m128i);
// int _mm_testnzc_pd(__m128d, __m128d);
// int _mm_testnzc_ps(__m128, __m128);
// int _mm_testnzc_si128(__m128i, __m128i);
// int _mm_testz_pd(__m128d, __m128d);
// int _mm_testz_ps(__m128, __m128);
// int _mm_testz_si128(__m128i, __m128i);
// int _mm_ucomieq_sd(__m128d, __m128d);
// int _mm_ucomieq_ss(__m128, __m128);
// int _mm_ucomige_sd(__m128d, __m128d);
// int _mm_ucomige_ss(__m128, __m128);
// int _mm_ucomigt_sd(__m128d, __m128d);
// int _mm_ucomigt_ss(__m128, __m128);
// int _mm_ucomile_sd(__m128d, __m128d);
// int _mm_ucomile_ss(__m128, __m128);
// int _mm_ucomilt_sd(__m128d, __m128d);
// int _mm_ucomilt_ss(__m128, __m128);
// int _mm_ucomineq_sd(__m128d, __m128d);
// int _mm_ucomineq_ss(__m128, __m128);
// __m128i _mm_unpackhi_epi16(__m128i, __m128i);
// __m128i _mm_unpackhi_epi32(__m128i, __m128i);
// __m128i _mm_unpackhi_epi64(__m128i, __m128i);
// __m128i _mm_unpackhi_epi8(__m128i, __m128i);
// __m128d _mm_unpackhi_pd(__m128d, __m128d);
// __m128 _mm_unpackhi_ps(__m128, __m128);
// __m128i _mm_unpacklo_epi16(__m128i, __m128i);
// __m128i _mm_unpacklo_epi32(__m128i, __m128i);
// __m128i _mm_unpacklo_epi64(__m128i, __m128i);
// __m128i _mm_unpacklo_epi8(__m128i, __m128i);
// __m128d _mm_unpacklo_pd(__m128d, __m128d);
// __m128 _mm_unpacklo_ps(__m128, __m128);
// __m128d _mm_xor_pd(__m128d, __m128d);
// __m128 _mm_xor_ps(__m128, __m128);
// __m128i _mm_xor_si128(__m128i, __m128i);
// __m256i _mm256_abs_epi16(__m256i);
// __m256i _mm256_abs_epi32(__m256i);
// __m256i _mm256_abs_epi8(__m256i);
// __m256i _mm256_add_epi16(__m256i, __m256i);
// __m256i _mm256_add_epi32(__m256i, __m256i);
// __m256i _mm256_add_epi64(__m256i, __m256i);
// __m256i _mm256_add_epi8(__m256i, __m256i);
// __m256d _mm256_add_pd(__m256d, __m256d);
// __m256 _mm256_add_ps(__m256, __m256);
// __m256i _mm256_adds_epi16(__m256i, __m256i);
// __m256i _mm256_adds_epi8(__m256i, __m256i);
// __m256i _mm256_adds_epu16(__m256i, __m256i);
// __m256i _mm256_adds_epu8(__m256i, __m256i);
// __m256d _mm256_addsub_pd(__m256d, __m256d);
// __m256 _mm256_addsub_ps(__m256, __m256);
// __m256i _mm256_alignr_epi8(__m256i, __m256i, const int);
// __m256d _mm256_and_pd(__m256d, __m256d);
// __m256 _mm256_and_ps(__m256, __m256);
// __m256i _mm256_and_si256(__m256i, __m256i);
// __m256d _mm256_andnot_pd(__m256d, __m256d);
// __m256 _mm256_andnot_ps(__m256, __m256);
// __m256i _mm256_andnot_si256(__m256i, __m256i);
// __m256i _mm256_avg_epu16(__m256i, __m256i);
// __m256i _mm256_avg_epu8(__m256i, __m256i);
// __m256i _mm256_blend_epi16(__m256i, __m256i, const int);
// __m256i _mm256_blend_epi32(__m256i, __m256i, const int);
// __m256d _mm256_blend_pd(__m256d, __m256d, const int);
// __m256 _mm256_blend_ps(__m256, __m256, const int);
// __m256i _mm256_blendv_epi8(__m256i, __m256i, __m256i);
// __m256d _mm256_blendv_pd(__m256d, __m256d, __m256d);
// __m256 _mm256_blendv_ps(__m256, __m256, __m256);
// __m256d _mm256_broadcast_pd(__m128d const*);
// __m256 _mm256_broadcast_ps(__m128 const*);
// __m256d _mm256_broadcast_sd(double const*);
// __m256 _mm256_broadcast_ss(float const*);
// __m256i _mm256_broadcastb_epi8(__m128i);
// __m256i _mm256_broadcastd_epi32(__m128i);
// __m256i _mm256_broadcastq_epi64(__m128i);
// __m256d _mm256_broadcastsd_pd(__m128d);
// __m256i _mm256_broadcastsi128_si256(__m128i);
// __m256 _mm256_broadcastss_ps(__m128);
// __m256i _mm256_broadcastw_epi16(__m128i);
// __m256 _mm256_castpd_ps(__m256d);
// __m256i _mm256_castpd_si256(__m256d);
// __m256d _mm256_castpd128_pd256(__m128d);
// __m128d _mm256_castpd256_pd128(__m256d);
// __m256d _mm256_castps_pd(__m256);
// __m256i _mm256_castps_si256(__m256);
// __m256 _mm256_castps128_ps256(__m128);
// __m128 _mm256_castps256_ps128(__m256);
// __m256i _mm256_castsi128_si256(__m128i);
// __m256d _mm256_castsi256_pd(__m256i);
// __m256 _mm256_castsi256_ps(__m256i);
// __m128i _mm256_castsi256_si128(__m256i);
// __m256i _mm256_cmov_si256(__m256i, __m256i, __m256i);
// __m256d  _mm256_cmp_pd(__m256d, __m256d, const int);
// __m256  _mm256_cmp_ps(__m256, __m256, const int);
// __m256i _mm256_cmpeq_epi16(__m256i, __m256i);
// __m256i _mm256_cmpeq_epi32(__m256i, __m256i);
// __m256i _mm256_cmpeq_epi64(__m256i, __m256i);
// __m256i _mm256_cmpeq_epi8(__m256i, __m256i);
// __m256i _mm256_cmpgt_epi16(__m256i, __m256i);
// __m256i _mm256_cmpgt_epi32(__m256i, __m256i);
// __m256i _mm256_cmpgt_epi64(__m256i, __m256i);
// __m256i _mm256_cmpgt_epi8(__m256i, __m256i);
// __m256i _mm256_cvtepi16_epi32(__m128i);
// __m256i _mm256_cvtepi16_epi64(__m128i);
// __m256i _mm256_cvtepi32_epi64(__m128i);
// __m256d _mm256_cvtepi32_pd(__m128i);
// __m256 _mm256_cvtepi32_ps(__m256i);
// __m256i _mm256_cvtepi8_epi16(__m128i);
// __m256i _mm256_cvtepi8_epi32(__m128i);
// __m256i _mm256_cvtepi8_epi64(__m128i);
// __m256i _mm256_cvtepu16_epi32(__m128i);
// __m256i _mm256_cvtepu16_epi64(__m128i);
// __m256i _mm256_cvtepu32_epi64(__m128i);
// __m256i _mm256_cvtepu8_epi16(__m128i);
// __m256i _mm256_cvtepu8_epi32(__m128i);
// __m256i _mm256_cvtepu8_epi64(__m128i);
// __m128i _mm256_cvtpd_epi32(__m256d);
// __m128 _mm256_cvtpd_ps(__m256d);
// __m256 _mm256_cvtph_ps(__m128i);
// __m256i _mm256_cvtps_epi32(__m256);
// __m256d _mm256_cvtps_pd(__m128);
// __m128i _mm256_cvtps_ph(__m256, const int);
// __m128i _mm256_cvttpd_epi32(__m256d);
// __m256i _mm256_cvttps_epi32(__m256);
// __m256d _mm256_div_pd(__m256d, __m256d);
// __m256 _mm256_div_ps(__m256, __m256);
// __m256 _mm256_dp_ps(__m256, __m256, const int);
// __m128d _mm256_extractf128_pd(__m256d, const int);
// __m128 _mm256_extractf128_ps(__m256, const int);
// __m128i _mm256_extractf128_si256(__m256i, const int);
// __m128i _mm256_extracti128_si256(__m256i a, int offset);
// __m256d _mm256_fmadd_pd(__m256d a, __m256d b, __m256d c);
// __m256 _mm256_fmadd_ps(__m256 a, __m256 b, __m256 c);
// __m256d _mm256_fmaddsub_pd(__m256d a, __m256d b, __m256d c);
// __m256 _mm256_fmaddsub_ps(__m256 a, __m256 b, __m256 c);
// __m256d _mm256_fmsub_pd(__m256d a, __m256d b, __m256d c);
// __m256 _mm256_fmsub_ps(__m256 a, __m256 b, __m256 c);
// __m256d _mm256_fmsubadd_pd(__m256d a, __m256d b, __m256d c);
// __m256 _mm256_fmsubadd_ps(__m256 a, __m256 b, __m256 c);
// __m256d _mm256_fnmadd_pd(__m256d a, __m256d b, __m256d c);
// __m256 _mm256_fnmadd_ps(__m256 a, __m256 b, __m256 c);
// __m256d _mm256_fnmsub_pd(__m256d a, __m256d b, __m256d c);
// __m256 _mm256_fnmsub_ps(__m256 a, __m256 b, __m256 c);
// __m256d _mm256_frcz_pd(__m256d);
// __m256 _mm256_frcz_ps(__m256);
// __m256i _mm256_hadd_epi16(__m256i, __m256i);
// __m256i _mm256_hadd_epi32(__m256i, __m256i);
// __m256d _mm256_hadd_pd(__m256d, __m256d);
// __m256 _mm256_hadd_ps(__m256, __m256);
// __m256i _mm256_hadds_epi16(__m256i, __m256i);
// __m256i _mm256_hsub_epi16(__m256i, __m256i);
// __m256i _mm256_hsub_epi32(__m256i, __m256i);
// __m256d _mm256_hsub_pd(__m256d, __m256d);
// __m256 _mm256_hsub_ps(__m256, __m256);
// __m256i _mm256_hsubs_epi16(__m256i, __m256i);
// __m256i _mm256_i32gather_epi32(int const* base, __m256i index, const int scale);
// __m256i _mm256_i32gather_epi64(__int64 const* base, __m128i index, const int scale);
// __m256d _mm256_i32gather_pd(double const* base, __m128i index, const int scale);
// __m256 _mm256_i32gather_ps(float const* base, __m256i index, const int scale);
// __m256i _mm256_i64gather_epi32(int const* base, __m256i index, const int scale);
// __m256i _mm256_i64gather_epi64(__int64 const* base, __m256i index, const int scale);
// __m256d _mm256_i64gather_pd(double const* base, __m256i index, const int scale);
// __m128 _mm256_i64gather_ps(float const* base, __m256i index, const int scale);
// __m256d _mm256_insertf128_pd(__m256d, __m128d, int);
// __m256 _mm256_insertf128_ps(__m256, __m128, int);
// __m256i _mm256_insertf128_si256(__m256i, __m128i, int);
// __m256i _mm256_inserti128_si256(__m256i, __m128i, int);
// __m256i _mm256_lddqu_si256(__m256i*);
// __m256d _mm256_load_pd(double const*);
// __m256 _mm256_load_ps(float const*);
// __m256i _mm256_load_si256(__m256i*);
// __m256d _mm256_loadu_pd(double const*);
// __m256 _mm256_loadu_ps(float const*);
// __m256i _mm256_loadu_si256(__m256i*);
// __m256d _mm_macc_pd(__m256d, __m256d, __m256d);
// __m256 _mm_macc_ps(__m256, __m256, __m256);
// __m256i _mm256_madd_epi16(__m256i, __m256i);
// __m256d _mm_maddsub_pd(__m256d, __m256d, __m256d);
// __m256 _mm_maddsub_ps(__m256, __m256, __m256);
// __m256i _mm256_maddubs_epi16(__m256i, __m256i);
// __m256i _mm256_mask_i32gather_epi32(__m256i src, int const* base, __m256i index, __m256i mask, const int scale);
// __m256i _mm256_mask_i32gather_epi64(__m256i src, __int64 const* base, __m128i index, __m256i mask, const int scale);
// __m256d _mm256_mask_i32gather_pd(__m256d src, double const* base, __m128i index, __m256d mask, const int scale);
// __m256 _mm256_mask_i32gather_ps(__m256 src, float const* base, __m256i index, __m256 mask, const int scale);
// __m128i _mm256_mask_i64gather_epi32(__m128i src, int const* base, __m256i index, __m128i mask, const int scale);
// __m256i _mm256_mask_i64gather_epi64(__m256i src, __int64 const* base, __m256i index, __m256i mask, const int scale);
// __m256d _mm256_mask_i64gather_pd(__m256d src, double const* base, __m256i index, __m256d mask, const int scale);
// __m128 _mm256_mask_i64gather_ps(__m128 src, float const* base, __m256i index, __m128 mask, const int scale);
// __m256i _mm256_maskload_epi32(int const*, __m256i);
// __m256i _mm256_maskload_epi64(__int64 const*, __m256i);
// __m256d _mm256_maskload_pd(double const*, __m256i);
// __m256 _mm256_maskload_ps(float const*, __m256i);
// void _mm256_maskstore_epi32(int*, __m256i, __m256i);
// void _mm256_maskstore_epi64(__int64*, __m256i, __m256i);
// void _mm256_maskstore_pd(double*, __m256i, __m256d);
// void _mm256_maskstore_ps(float*, __m256i, __m256);
// __m256i _mm256_max_epi16(__m256i, __m256i);
// __m256i _mm256_max_epi32(__m256i, __m256i);
// __m256i _mm256_max_epi8(__m256i, __m256i);
// __m256i _mm256_max_epu16(__m256i, __m256i);
// __m256i _mm256_max_epu32(__m256i, __m256i);
// __m256i _mm256_max_epu8(__m256i, __m256i);
// __m256d _mm256_max_pd(__m256d, __m256d);
// __m256 _mm256_max_ps(__m256, __m256);
// __m256i _mm256_min_epi16(__m256i, __m256i);
// __m256i _mm256_min_epi32(__m256i, __m256i);
// __m256i _mm256_min_epi8(__m256i, __m256i);
// __m256i _mm256_min_epu16(__m256i, __m256i);
// __m256i _mm256_min_epu32(__m256i, __m256i);
// __m256i _mm256_min_epu8(__m256i, __m256i);
// __m256d _mm256_min_pd(__m256d, __m256d);
// __m256 _mm256_min_ps(__m256, __m256);
// __m256d _mm256_movedup_pd(__m256d);
// __m256 _mm256_movehdup_ps(__m256);
// __m256 _mm256_moveldup_ps(__m256);
// int _mm256_movemask_epi8(__m256i);
// int _mm256_movemask_pd(__m256d);
// int _mm256_movemask_ps(__m256);
// __m256i _mm256_mpsadbw_epu8(__m256i, __m256i, const int);
// __m256d _mm_msub_pd(__m256d, __m256d, __m256d);
// __m256 _mm_msub_ps(__m256, __m256, __m256);
// __m256d _mm_msubadd_pd(__m256d, __m256d, __m256d);
// __m256 _mm_msubadd_ps(__m256, __m256, __m256);
// __m256i _mm256_mul_epi32(__m256i, __m256i);
// __m256i _mm256_mul_epu32(__m256i, __m256i);
// __m256d _mm256_mul_pd(__m256d, __m256d);
// __m256 _mm256_mul_ps(__m256, __m256);
// __m256i _mm256_mulhi_epi16(__m256i, __m256i);
// __m256i _mm256_mulhi_epu16(__m256i, __m256i);
// __m256i _mm256_mulhrs_epi16(__m256i, __m256i);
// __m256i _mm256_mullo_epi16(__m256i, __m256i);
// __m256i _mm256_mullo_epi32(__m256i, __m256i);
// __m256d _mm_nmacc_pd(__m256d, __m256d, __m256d);
// __m256 _mm_nmacc_ps(__m256, __m256, __m256);
// __m256d _mm_nmsub_pd(__m256d, __m256d, __m256d);
// __m256 _mm_nmsub_ps(__m256, __m256, __m256);
// __m256d _mm256_or_pd(__m256d, __m256d);
// __m256 _mm256_or_ps(__m256, __m256);
// __m256i _mm256_or_si256(__m256i, __m256i);
// __m256i _mm256_packs_epi16(__m256i, __m256i);
// __m256i _mm256_packs_epi32(__m256i, __m256i);
// __m256i _mm256_packus_epi16(__m256i, __m256i);
// __m256i _mm256_packus_epi32(__m256i, __m256i);
// __m256d _mm256_permute_pd(__m256d, int);
// __m256 _mm256_permute_ps(__m256, int);
// __m256d _mm256_permute2_pd(__m256d, __m256d, __m256i, int);
// __m256 _mm256_permute2_ps(__m256, __m256, __m256i, int);
// __m256d _mm256_permute2f128_pd(__m256d, __m256d, int);
// __m256 _mm256_permute2f128_ps(__m256, __m256, int);
// __m256i _mm256_permute2f128_si256(__m256i, __m256i, int);
// __m256i _mm256_permute2x128_si256(__m256i, __m256i, const int);
// __m256i _mm256_permute4x64_epi64(__m256i, const int);
// __m256d _mm256_permute4x64_pd(__m256d, const int);
// __m256d _mm256_permutevar_pd(__m256d, __m256i);
// __m256 _mm256_permutevar_ps(__m256, __m256i);
// __m256i _mm256_permutevar8x32_epi32(__m256i, __m256i);
// __m256 _mm256_permutevar8x32_ps(__m256, __m256i);
// __m256 _mm256_rcp_ps(__m256);
// __m256d _mm256_round_pd(__m256d, int);
// __m256 _mm256_round_ps(__m256, int);
// __m256 _mm256_rsqrt_ps(__m256);
// __m256i _mm256_sad_epu8(__m256i, __m256i);
// __m256i _mm256_set_epi16(short, short, short, short, short, short, short, short, short, short, short, short, short,
//                          short, short, short);
// __m256i _mm256_set_epi32(int, int, int, int, int, int, int, int);
// __m256i _mm256_set_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char,
//                         char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char);
// __m256d _mm256_set_pd(double, double, double, double);
// __m256 _mm256_set_ps(float, float, float, float, float, float, float, float);
// __m256i _mm256_set1_epi16(short);
// __m256i _mm256_set1_epi32(int);
// __m256i _mm256_set1_epi8(char);
// __m256d _mm256_set1_pd(double);
// __m256 _mm256_set1_ps(float);
// __m256i _mm256_setr_epi16(short, short, short, short, short, short, short, short, short, short, short, short, short,
//                           short, short, short);
// __m256i _mm256_setr_epi32(int, int, int, int, int, int, int, int);
// __m256i _mm256_setr_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char,
//                          char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char);
// __m256d _mm256_setr_pd(double, double, double, double);
// __m256 _mm256_setr_ps(float, float, float, float, float, float, float, float);
// __m256d _mm256_setzero_pd(void);
// __m256 _mm256_setzero_ps(void);
// __m256i _mm256_setzero_si256(void);
// __m256i _mm256_shuffle_epi32(__m256i, const int);
// __m256i _mm256_shuffle_epi8(__m256i, __m256i);
// __m256d _mm256_shuffle_pd(__m256d, __m256d, const int);
// __m256 _mm256_shuffle_ps(__m256, __m256, const int);
// __m256i _mm256_shufflehi_epi16(__m256i, const int);
// __m256i _mm256_shufflelo_epi16(__m256i, const int);
// __m256i _mm256_sign_epi16(__m256i, __m256i);
// __m256i _mm256_sign_epi32(__m256i, __m256i);
// __m256i _mm256_sign_epi8(__m256i, __m256i);
// __m256i _mm256_sll_epi16(__m256i, __m128i);
// __m256i _mm256_sll_epi32(__m256i, __m128i);
// __m256i _mm256_sll_epi64(__m256i, __m128i);
// __m256i _mm256_slli_epi16(__m256i, int);
// __m256i _mm256_slli_epi32(__m256i, int);
// __m256i _mm256_slli_epi64(__m256i, int);
// __m256i _mm256_slli_si256(__m256i, int);
// __m256i _mm256_sllv_epi32(__m256i, __m256i);
// __m256i _mm256_sllv_epi64(__m256i, __m256i);
// __m256d _mm256_sqrt_pd(__m256d);
// __m256 _mm256_sqrt_ps(__m256);
// __m256i _mm256_sra_epi16(__m256i, __m128i);
// __m256i _mm256_sra_epi32(__m256i, __m128i);
// __m256i _mm256_srai_epi16(__m256i, int);
// __m256i _mm256_srai_epi32(__m256i, int);
// __m256i _mm256_srav_epi32(__m256i, __m256i);
// __m256i _mm256_srl_epi16(__m256i, __m128i);
// __m256i _mm256_srl_epi32(__m256i, __m128i);
// __m256i _mm256_srl_epi64(__m256i, __m128i);
// __m256i _mm256_srli_epi16(__m256i, int);
// __m256i _mm256_srli_epi32(__m256i, int);
// __m256i _mm256_srli_epi64(__m256i, int);
// __m256i _mm256_srli_si256(__m256i, int);
// __m256i _mm256_srlv_epi32(__m256i, __m256i);
// __m256i _mm256_srlv_epi64(__m256i, __m256i);
// void _mm256_store_pd(double*, __m256d);
// void _mm256_store_ps(float*, __m256);
// void _mm256_store_si256(__m256i*, __m256i);
// void _mm256_storeu_pd(double*, __m256d);
// void _mm256_storeu_ps(float*, __m256);
// void _mm256_storeu_si256(__m256i*, __m256i);
// __m256i _mm256_stream_load_si256(__m256i const*);
// void __mm256_stream_pd(double*, __m256d);
// void _mm256_stream_ps(float* p, __m256 a);
// void __mm256_stream_si256(__m256i*, __m256i);
// __m256i _mm256_sub_epi16(__m256i, __m256i);
// __m256i _mm256_sub_epi32(__m256i, __m256i);
// __m256i _mm256_sub_epi64(__m256i, __m256i);
// __m256i _mm256_sub_epi8(__m256i, __m256i);
// __m256d _mm256_sub_pd(__m256d, __m256d);
// __m256 _mm256_sub_ps(__m256, __m256);
// __m256i _mm256_subs_epi16(__m256i, __m256i);
// __m256i _mm256_subs_epi8(__m256i, __m256i);
// __m256i _mm256_subs_epu16(__m256i, __m256i);
// __m256i _mm256_subs_epu8(__m256i, __m256i);
// int _mm256_testc_pd(__m256d, __m256d);
// int _mm256_testc_ps(__m256, __m256);
// int _mm256_testc_si256(__m256i, __m256i);
// int _mm256_testnzc_pd(__m256d, __m256d);
// int _mm256_testnzc_ps(__m256, __m256);
// int _mm256_testnzc_si256(__m256i, __m256i);
// int _mm256_testz_pd(__m256d, __m256d);
// int _mm256_testz_ps(__m256, __m256);
// int _mm256_testz_si256(__m256i, __m256i);
// __m256i _mm256_unpackhi_epi16(__m256i, __m256i);
// __m256i _mm256_unpackhi_epi32(__m256i, __m256i);
// __m256i _mm256_unpackhi_epi64(__m256i, __m256i);
// __m256i _mm256_unpackhi_epi8(__m256i, __m256i);
// __m256d _mm256_unpackhi_pd(__m256d, __m256d);
// __m256 _mm256_unpackhi_ps(__m256, __m256);
// __m256i _mm256_unpacklo_epi16(__m256i, __m256i);
// __m256i _mm256_unpacklo_epi32(__m256i, __m256i);
// __m256i _mm256_unpacklo_epi64(__m256i, __m256i);
// __m256i _mm256_unpacklo_epi8(__m256i, __m256i);
// __m256d _mm256_unpacklo_pd(__m256d, __m256d);
// __m256 _mm256_unpacklo_ps(__m256, __m256);
// __m256d _mm256_xor_pd(__m256d, __m256d);
// __m256 _mm256_xor_ps(__m256, __m256);
// __m256i _mm256_xor_si256(__m256i, __m256i);
void _mm256_zeroall(void);
void _mm256_zeroupper(void);
void __movsb(unsigned char*, unsigned char const*, size_t);
void __movsd(unsigned long*, unsigned long const*, size_t);
void __movsw(unsigned short*, unsigned short const*, size_t);
unsigned int _mulx_u32(unsigned int, unsigned int, unsigned int*);
void __nop(void);
void __nvreg_restore_fence(void);
void __nvreg_save_fence(void);
void __outbyte(unsigned short Port, unsigned char Data);
void __outbytestring(unsigned short Port, unsigned char* Buffer, unsigned long Count);
void __outdword(unsigned short Port, unsigned long Data);
void __outdwordstring(unsigned short Port, unsigned long* Buffer, unsigned long Count);
void __outword(unsigned short Port, unsigned short Data);
void __outwordstring(unsigned short Port, unsigned short* Buffer, unsigned long Count);
unsigned int _pdep_u32(unsigned int, unsigned int);
unsigned int _pext_u32(unsigned int, unsigned int);
unsigned int __popcnt(unsigned int);
unsigned short __popcnt16(unsigned short);
int _rdrand16_step(unsigned short*);
int _rdrand32_step(unsigned int*);
int _rdseed16_step(unsigned short*);
int _rdseed32_step(unsigned int*);
unsigned __int64 __rdtsc(void);
unsigned __int64 __rdtscp(unsigned int*);
void _ReadBarrier(void);
unsigned long __readcr0(void);
unsigned long __readcr2(void);
unsigned long __readcr3(void);
unsigned long __readcr4(void);
unsigned long __readcr8(void);
unsigned __readdr(unsigned);
unsigned __readeflags(void);
unsigned char __readfsbyte(unsigned long Offset);
unsigned long __readfsdword(unsigned long Offset);
unsigned short __readfsword(unsigned long Offset);
unsigned __int64 __readmsr(unsigned long);
unsigned __int64 __readpmc(unsigned long a);
void _ReadWriteBarrier(void);
void* _ReturnAddress(void);
unsigned int _rorx_u32(unsigned int, const unsigned int);
unsigned short _rotl16(unsigned short value, unsigned char shift);
unsigned char _rotl8(unsigned char value, unsigned char shift);
unsigned short _rotr16(unsigned short value, unsigned char shift);
unsigned char _rotr8(unsigned char value, unsigned char shift);
void _rsm(void);
int _sarx_i32(int, unsigned int);
unsigned long __segmentlimit(unsigned long a);
void _sgdt(void*);
unsigned int _shlx_u32(unsigned int, unsigned int);
unsigned int _shrx_u32(unsigned int, unsigned int);
void __sidt(void*);
void* __slwpcb(void);
void _stac(void);
void _store_be_u16(void*, unsigned short);
void _storebe_i16(void*, short);
void _store_be_u32(void*, unsigned int);
void _storebe_i32(void*, int);
void _Store_HLERelease(long volatile*, long);
void _StorePointer_HLERelease(void* volatile*, void*);
void __stosb(unsigned char*, unsigned char*, size_t);
void __stosd(unsigned long*, unsigned long*, size_t);
void __stosw(unsigned short*, unsigned short*, size_t);
unsigned char _subborrow_u16(unsigned char b_in, unsigned short src1, unsigned short src2, unsigned short* diff);
unsigned char _subborrow_u32(unsigned char b_in, unsigned int src1, unsigned int src2, unsigned int* diff);
unsigned char _subborrow_u8(unsigned char b_in, unsigned char src1, unsigned char src2, unsigned char* diff);
void __svm_clgi(void);
void __svm_invlpga(void*, int);
void __svm_skinit(int);
void __svm_stgi(void);
void __svm_vmload(size_t);
void __svm_vmrun(size_t);
void __svm_vmsave(size_t);
unsigned int _t1mskc_u32(unsigned int);
unsigned int _tzcnt_u32(unsigned int);
unsigned int _tzmsk_u32(unsigned int);
void __ud2(void);
unsigned __int64 __cdecl __ull_rshift(unsigned __int64, int);
void __vmx_off(void);
void __vmx_vmptrst(unsigned __int64*);
void __wbinvd(void);
void _WriteBarrier(void);
void __writecr0(unsigned long);
void __writecr3(unsigned long);
void __writecr4(unsigned long);
void __writecr8(unsigned long);
void __writedr(unsigned, unsigned);
void __writeeflags(unsigned);
void __writefsbyte(unsigned long Offset, unsigned char Data);
void __writefsdword(unsigned long Offset, unsigned long Data);
void __writefsword(unsigned long Offset, unsigned short Data);
void __writemsr(unsigned long, unsigned __int64);
void _xabort(unsigned int);
unsigned _xbegin(void);
void _xend(void);
unsigned __int64 _xgetbv(unsigned int);
void _xrstor(void const*, unsigned __int64);
void _xsave(void*, unsigned __int64);
void _xsaveopt(void*, unsigned __int64);
void _xsetbv(unsigned int, unsigned __int64);
unsigned char _xtest(void);

NOS_END_EXTERN_C
